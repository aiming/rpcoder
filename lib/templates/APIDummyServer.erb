/* generated by rpcoder */
using System;
using System.Collections;
using System.Collections.Generic;

namespace <%= name_space %>
{
	public class <%= api_class_name %>DummyServer : <%= api_class_name %>Interface
	{
		public <%= api_class_name %>DummyServer(string baseUrl)
		{
			BaseUrl = baseUrl;
			api = new <%= api_class_name %>(baseUrl);
		}

		private <%= api_class_name %> api;

		public RpcoderErrorHandler ErrorHandler { get; set; }

		public string BaseUrl { get; protected set; }

		public RpcoderLogger Logger
		{
			get
			{
				return api.Logger;
			}
			set
			{
				api.Logger = value;
			}
		}

		public void AddCommonParameter(string key, string value)
		{
		}

		public string RemoveCommonParameter(string key)
		{
			return "";
		}

		<%- functions.each do |func| -%>
		<%-
			response = func.name.camelize + "Response"
			successHandler = "Action<" + response + ">"
			request_query = func.params.map{|i| [i.array_or_type, i.name.to_s.camelize(false)].join(' ') }
			params_excluded_error_handler = request_query + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcoderErrorHandler error']
		-%>
		public class <%= func.name.camelize %>Request
		{
			<%- func.params.each do |i| -%>
			public <%= i.array_or_type %> <%= i.name.to_s.camelize %>;
			<%- end -%>
			public <%= successHandler %> Success;
			public RpcoderErrorHandler Error;
		}
		private readonly DummyLogic<<%= func.name.camelize %>Request> <%= func.name.camelize(false) %>Logic = new DummyLogic<<%= func.name.camelize %>Request>();
		public IDummyLogic<<%= func.name.camelize %>Request> <%= func.name.camelize %>Logic { get { return <%= func.name.camelize(false) %>Logic; } }

		public IEnumerator <%= func.name.camelize %>(<%= params_excluded_error_handler.join(', ') %>)
		{
			return this.<%= func.name.camelize %>(<%= (func.params.map{|i| i.name.to_s.camelize(false) } + ['success']).join(', ') %>, null);
		}

		public IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>)
		{
			if(<%= func.name.camelize(false) %>Logic.HasLogic)
			{
				return <%= func.name.camelize(false) %>Logic.Request(new <%= func.name.camelize %>Request(){
				<%- func.params.each do |i| -%>
					<%= i.name.to_s.camelize %> = <%= i.name.to_s.camelize(false) %>,
				<%- end -%>
					Success = success,
					Error = (error != null) ? error : ErrorHandler
					});
			}
			else
			{
				return api.<%= func.name.camelize %>(
				<%- func.params.each do |i| -%>
					<%= i.name.to_s.camelize(false) %>,
				<%- end -%>
					success,
					(error != null) ? error : ErrorHandler
					);
			}
		}

		<%- end -%>
	}

	/// <summary cref="DummyLogic{TArg}">
	/// </summary>
	public interface IDummyLogic<TArg>
	{
		/// <summary>
		/// ダミーロジック設定。
		/// </summary>
		/// <param name="callback">リクエストを受け取るコールバック。</param>
		void Set(Func<TArg, IEnumerator> callback);

		/// <summary>
		/// ダミーロジック解除。
		/// </summary>
		void Clear();

		/// <summary>
		/// ダミーロジックがあるかどうか。
		/// </summary>
		bool HasLogic { get; }
	}

	/// <summary>
	/// ダミーサーバーの処理を注入するためのクラス
	/// </summary>
	/// <typeparam name="TArg">リクエストの型。</typeparam>
	public class DummyLogic<TArg> : IDummyLogic<TArg>
	{
		private Func<TArg, IEnumerator> _callback;

		public void Set(Func<TArg, IEnumerator> callback) { _callback = callback; }

		public void Clear() { _callback = null; }

		public bool HasLogic
		{
			get
			{
				return _callback != null;
			}
		}

		/// <summary>
		/// リクエスト発生。
		/// </summary>
		/// <param name="arg">リクエスト。</param>
		public IEnumerator Request(TArg request)
		{
			return _callback(request);
		}
	}
}
