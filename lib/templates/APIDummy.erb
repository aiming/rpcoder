/* generated by rpcoder */

using System.Collections;
using System;
using System.Collections.Generic;

namespace <%= name_space %>
{
	public class DummyError
	{
		public string ErrorType { get; set; }
		public string Message { get; set; }
		public string TargetScene { get; set; }
		
		public DummyError(string errorType, string message, string targetScene)
		{
			ErrorType = errorType;
			Message = message;
			TargetScene = targetScene;
		}
	}

	public class <%= api_class_name %>Dummy : <%= api_class_name %>Interface
	{
		public RpcoderErrorHandler ErrorHandler { get; set; }
		public string BaseUrl { get; protected set; }
		public RpcoderLogger Logger { get; set; }
		public void AddCommonParameter(string key, string value)
		{
		}
		public string RemoveCommonParameter(string key)
		{
			return "";
		}

		private DummyError error = null;
		
		private Dictionary<string, ArrayList> dummySuccess = new Dictionary<string, ArrayList>();

		public void SetDummySuccess(string functionName, ArrayList success)
		{
			dummySuccess.Add(functionName, success);
		}

		private ArrayList GetDummySuccess(string functionName)
		{
			return dummySuccess[functionName];
		}

		public void SetDummyError(DummyError error)
		{
			this.error = error;
		}

		private bool IsError { get { return this.error != null; } }

		<%- functions.each do |func| -%>
		<%-
			successHandler = func.name.camelize + "Responder"
			params_excluded_error_handler = func.params.map{|i| [i.array_or_type, i.name.to_s.camelize(false)].join(' ') } + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcoderErrorHandler error']
		-%>
		/**
		* <%= func.description %>
		*
		<%- func.params.each do |param| -%>
		* @<%= param.name.to_s.camelize(false) %>:<%= param.type %> <%= param.options[:expect] %> <%= param.options[:description] %>
		<%- end -%>
		* @success:<%= successHandler %>
		*/
		public IEnumerator <%= func.name.camelize %>(<%= params_excluded_error_handler.join(', ') %>)
		{
			return this.<%= func.name.camelize %>(<%= (func.params.map{|i| i.name.to_s.camelize(false) } + ['success']).join(', ') %>, null);
		}

		/**
		* <%= func.description %>
		*
		<%- func.params.each do |param| -%>
		* @<%= param.name.to_s.camelize(false) %>:<%= param.type %> <%= param.options[:expect] %> <%= param.options[:description] %>
		<%- end -%>
		* @success:<%= successHandler %>
		* @error:RpcoderErrorHandler
		*/
		public IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>)
		{
			if( !HandleError(error) )
			{
				<%- if func.has_return_type? -%>
				ArrayList arguments = GetDummySuccess("<%= func.name.camelize %>");
				<%- end-%>
				<%-
					index = -1
				-%>
				success(<%= func.return_types.map{|i| "(#{i.array_or_type})arguments[#{index+=1}]" }.join(', ') %>);
			}
			yield return null;
		}

		<%- end -%>
		
		private bool HandleError(RpcoderErrorHandler errorHandler)
		{
			if( IsError )
			{
				if(errorHandler != null)
				{
					errorHandler(error.ErrorType, error.Message, error.TargetScene);
				}
				else
				{
					ErrorHandler(error.ErrorType, error.Message, error.TargetScene);
				}
				return true;
			}
			return false;
		}
	}
}
