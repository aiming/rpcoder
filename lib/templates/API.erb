/* generated by rpcoder */
using UnityEngine;
using LitJson;
using System.Collections;
using System;

namespace <%= name_space %>
{
	public class <%= api_class_name %> : <%= api_class_name %>Interface
	{
		public const string RESTART		= "RESTART";
		public const string RETENTION	= "RETENTION";
		public const string TRANSITION	= "TRANSITION";
		
		public delegate void ErrorFunction(string errorType, string message, string targetScene);

		public string BaseUrl { get; protected set; }
		public string DefaultErrorMessage { get; set; }
		public ErrorFunction ErrorHandler { get; set; }
		
		public <%= api_class_name %>(string baseUrl)
		{
			BaseUrl = baseUrl;
			DefaultErrorMessage = "";
		}

		<%- functions.each do |func| -%>
		<%-
			successHandler = func.name.camelize + "Responder"
		-%>
		/**
		* <%= func.description %>
		*
		<%- func.params.each do |param| -%>
		* @<%= param.name %>:<%= param.array_or_type %> <%= param.options[:expect] %> <%= param.options[:description] %>
		<%- end -%>
		* @success:<%= successHandler %>
		* @error:ErrorFunction
		*/
		public delegate void <%= successHandler %>(<%= func.return_types.map{|i| [i.array_or_type, i.name].join(' ') }.join(', ') %>);
		
		<%-
			params = func.params.map{|i| [i.array_or_type, i.name].join(' ') } + [successHandler + ' success', 'ErrorFunction error']
		-%>
		public IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>)
		{
			string path = <%= func.path_parts.join(' + ') %>;
			
			<%-
				request_args = func.query_params.map{|i| "#{i.name}=\" + Uri.EscapeUriString(#{i.name}.ToString())" }
			-%>
			<%= if func.has_query_params?
					"path += \"?#{request_args.join(' + "&')};"
			end %>
			
			WWW www = new WWW(this.BaseUrl + path);
			yield return www;

			if(www.error != null)
			{
				error(RESTART, DefaultErrorMessage + www.error, null);
			}
			else
			{
				JsonData jsonData = JsonMapper.ToObject (www.text);
				<%-
					args = []
					if func.has_return_type?
						args = func.return_types.map {|param|
							"JsonMapper.ToObject<#{param.array_or_type}>(jsonData[\"#{param.name}\"].ToJson())"
						}
					end
				-%>
				success(<%= args.join(', ') %>);
			}
		}
		<%- end -%>
	}
}
