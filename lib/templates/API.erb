/* generated by rpcoder */
using UnityEngine;
using LitJson;
using System.Collections;
using System;
using System.Collections.Generic;
using System.Text;

namespace <%= name_space %>
{
	public class <%= api_class_name %> : <%= api_class_name %>Interface
	{
		public const string RESTART		= "RESTART";
		public const string RETENTION	= "RETENTION";
		public const string TRANSITION	= "TRANSITION";
		
		public string BaseUrl { get; protected set; }
		public RpcoderLogger Logger { get; set; } 
		private void Log(string log)
		{
			if(Logger != null) Logger(log);
		}

		private Dictionary<string, string> commonParameterList = new Dictionary<string, string>();

		public void AddCommonParameter(string key, string value)
		{
			commonParameterList.Add(key, value);
		}

		public string RemoveCommonParameter(string key)
		{
			string returnValue = "";
			if (commonParameterList.ContainsKey(key))
			{
				returnValue = commonParameterList[key];
				commonParameterList.Remove(key);
			}
			return returnValue;
		}

		public string DefaultErrorMessage { get; set; }
		public RpcoderErrorHandler ErrorHandler { get; set; }
		
		public <%= api_class_name %>(string baseUrl)
		{
			BaseUrl = baseUrl;
			DefaultErrorMessage = "";
		}

		<%- functions.each do |func| -%>
		<%-
			successHandler = func.name.camelize + "Responder"
		-%>
		/**
		* <%= func.description %>
		*
		<%- func.params.each do |param| -%>
		* @<%= param.name %>:<%= param.array_or_type %> <%= param.options[:expect] %> <%= param.options[:description] %>
		<%- end -%>
		* @success:<%= successHandler %>
		* @error:RpcoderErrorHandler
		*/
		<%-
			params = func.params.map{|i| [i.array_or_type, i.name].join(' ') } + [successHandler + ' success', 'RpcoderErrorHandler error']
		-%>
		public IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>)
		{
			string path = <%= func.path_parts.join(' + ') %>;
			<%- if func.is_get? -%>
			string argsPath = "";
				<%-
				request_args = func.query_params.map{|i| "#{i.name}=\" + Uri.EscapeUriString(#{i.name}.ToString())" }
				-%>
				<%= if func.has_query_params?
					"argsPath += \"?#{request_args.join(' + "&')};"
				end %>
			
			foreach(string key in commonParameterList.Keys)
			{
				if(argsPath == "")
				{
					argsPath += "?";
				}
				else
				{
					argsPath += "&";
				}
				argsPath += Uri.EscapeUriString(key) + "=" + Uri.EscapeUriString(commonParameterList[key]);
			}
			string fullPath = this.BaseUrl + path + argsPath;
			Log("request " + fullPath);
			WWW www = new WWW(fullPath);
			<%- else -%>
			JsonData data = new JsonData();
			
			<%- func.query_params.each do |i| -%>
			data["<%= i.name.to_s %>"] = <%= i.name.to_s %>;
			<%- end -%>
			foreach(string key in commonParameterList.Keys)
			{
				data[key] = commonParameterList[key];
			}
			
			byte[] byteArray = Encoding.UTF8.GetBytes(data.ToJson());
			Log("request " + this.BaseUrl + path + " " + data.ToJson());
			
			WWW www = new WWW(this.BaseUrl + path, byteArray);
			<%- end -%>
			yield return www;

			if(www.error != null)
			{
				error(RESTART, DefaultErrorMessage + www.error, null);
			}
			else
			{
				Log("<%= func.name.camelize %> responded " + www.text);
				<%- if func.has_return_type? -%>
				try
				{
					JsonData jsonData = JsonMapper.ToObject (www.text);
					<%- end -%>
					<%-
						args = []
						if func.has_return_type?
							args = func.return_types.map {|param|
								if param.array?
									if param.original_type?
										"JsonMapper.ToObject<#{param.array_or_type}>(jsonData[\"#{param.name}\"].ToJson())"
									else
										"#{param.type}.CreateList(jsonData[\"#{param.name}\"])"
									end
								else
									if param.original_type?
										"(#{param.type})jsonData[\"#{param.name}\"]"
									else
										"#{param.type}.Create(jsonData[\"#{param.name}\"])"
									end
								end
							}
						end
					-%>
					success(<%= args.join(', ') %>);
				}
				catch(JsonException)
				{
					error(RESTART, "Json parse Error", null);
				}
			}
		}
		
		<%- end -%>
	}
}
