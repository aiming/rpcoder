/* generated by rpcoder */

namespace <%= name_space %>
{
	using System.Collections;
	using System.Collections.Generic;

	public delegate void RpcoderLogger(string log);
	public delegate void RpcoderErrorHandler(string errorType, string message, string targetScene);
	<%- functions.each do |func| -%>
	<%-
		successHandler = func.name.camelize + "Responder"
	-%>
	public delegate void <%= successHandler %>(<%= func.return_types.map{|i| [i.array_or_type, i.name.to_s.camelize(false)].join(' ') }.join(', ') %>);
	<%- end -%>
	
	public interface <%= api_class_name %>Interface
	{
		string BaseUrl { get; }
		RpcoderLogger Logger { get; set; } 
		void AddCommonParameter(string key, string value);
		string RemoveCommonParameter(string key);
		RpcoderErrorHandler ErrorHandler{ get; set; }
		
		<%- functions.each do |func| -%>
		<%-
			successHandler = func.name.camelize + "Responder"
			params_excluded_error_handler = func.params.map{|i| [i.array_or_type, i.name.to_s.camelize(false)].join(' ') } + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcoderErrorHandler error']
		-%>
		/**
		* <%= func.description %>
		*
		<%- func.params.each do |param| -%>
		* @<%= param.name.to_s.camelize(false) %>:<%= param.array_or_type %> <%= param.options[:expect] %> <%= param.options[:description] %>
		<%- end -%>
		* @success:<%= successHandler %>
		*/
		IEnumerator <%= func.name.camelize %>(<%= params_excluded_error_handler.join(', ') %>);

		/**
		* <%= func.description %>
		*
		<%- func.params.each do |param| -%>
		* @<%= param.name.to_s.camelize(false) %>:<%= param.array_or_type %> <%= param.options[:expect] %> <%= param.options[:description] %>
		<%- end -%>
		* @success:<%= successHandler %>
		* @error:RpcoderErrorHandler
		*/
		IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>);
		
		<%- end -%>
	}
}
